name: Prime Data Hub

on:
  pull_request:
    branches: [ master, production ]
    paths-ignore:
      - 'prime-router/docs/**'

defaults:
  run:
    working-directory: prime-router

jobs:
  build:
    # Do not run on PRs from forks to prevent workflow abuse.
    # NOTE: changing this condition *may* require adjusting secrets usage in
    # the workflow steps below.
    # if: github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set Environment Variables
        run: |
               if [ "$GITHUB_BASE_REF" == "production" ]
               then
                   echo "Building for the production environment."
                   echo >> $GITHUB_ENV ACR_REPO=pdhprodcontainerregistry.azurecr.io
                   echo >> $GITHUB_ENV PREFIX=pdhprod
                   echo >> $GITHUB_ENV POSTGRES_USER=${{ secrets.POSTGRESQL_PROD_USER }}
                   echo >> $GITHUB_ENV POSTGRES_PASSWORD=${{ secrets.POSTGRESQL_PROD_PWD }}
               else
                   echo "Building for the test environment."
                   echo >> $GITHUB_ENV ACR_REPO=pdhtestcontainerregistry.azurecr.io
                   echo >> $GITHUB_ENV PREFIX=pdhtest
                   echo >> $GITHUB_ENV POSTGRES_USER=${{ secrets.POSTGRESQL_TEST_USER }}
                   echo >> $GITHUB_ENV POSTGRES_PASSWORD=${{ secrets.POSTGRESQL_TEST_PWD }}
               fi

      - name: Setup PostgreSQL
        uses: Harmon758/postgresql-action@0be19fa37850b22cb4c9bbf28a03abbf44abd863
        with:
          postgresql version: 11
          postgresql db: prime_data_hub
          postgresql user: ${{ env.POSTGRES_USER }}
          postgresql password: ${{ env.POSTGRES_PASSWORD }}
       
      - name: Setup JDK
        uses: actions/setup-java@v1.4.3
        with:
           java-version: 11
      
      - name: Build Maven Package
        run: mvn -B clean package --file pom.xml -Dpg.user=$POSTGRES_USER -Dpg.password=$POSTGRES_PASSWORD

      - name: Build Docker Image
        run: docker build . --file Dockerfile --tag ${{ env.ACR_REPO }}/${{ env.PREFIX }}:latest
      
      - name: Save Build Target
        uses: actions/upload-artifact@v2
        with:
          name: build_target
          path: prime-router/target

  update_docs:
    name: Update Docs
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Restore Build Target
        uses: actions/download-artifact@v2
        with:
          name: build_target

      - name: Log local information
        run: |
          echo 'Working directory:'
          pwd
          echo ''
          echo 'Parent directory contents:'
          ls -la ..
          echo ''
          echo 'Directory contents:'
          ls -la
      
      - name: 'Log target'
        run: |
          echo 'Target directory:'
          ls -la ./target

      - name: Generate New Docs
        run: './prime --generate-docs'

      - name: Check for Uncommited Docs
        id: check_changes
        run: |
          CHANGED_FILES=$(git diff docs --short)
          if [[ -n "$CHANGED_FILES" ]]; then
            echo "Updated documentation:"
            git diff docs

            # End with an error
            false
          fi
      
      - name: Commit Changes
        if: ${{ steps.check_changes.outcome == 'failure' }}
        run: |
          git add docs
          git commit -m 'Generate updated docs'
          git push
